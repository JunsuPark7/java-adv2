텍스트 데이터와 문자 인코딩.
입출력을 다룰때, 컴퓨터가 데이터를 저장하는 원리. 실무에 꼭 필요한 문자 인코딩.
컴퓨터의 메모리는 반도체로 만들어져 있음. 쉽게 이야기해서 수많은 전구들이 모여 있는것.
이 전구는 사실 트랜지스터라고 불리는 아주 작은 전자 스위치.
흐르거나 흐르지 않는 두가지 상태를 가질 수 있어서, 이를 통해 0,1 이라는 이진수를 표현함.

문자 인코딩 : 문자 집합을 통해 문자를 숫자로 변환하는 것
문자 디코딩 : 문자 집합을 통해 숫자를 문자로 변환하는 것

아스킬 문자 집합
utf-8 8비트 1바이트 기반, 가변길이 인코딩


UTF-8이 현대의 사실상 표준 인코딩 기술이 된 이유.
저장 공간 절약과 네트워크 효율성 : UTF-8은 ASCll 문자를 포함한 많은 서양 언어의 문자에 대해 1바이트를 사용한다. 반면에, UTF-16은 최소 2바이트를 사용하므로,
주로 ASCll 문자로 이루어진 영문 텍스트에서는 UTF-8이 2배 더 효율적이다. 특히 데이터를 네트워크로 전달할 때는 매우 큰 효율의 차이를 보인다.
참고로 웹에 있는 문서의 80퍼센트 이상은 영문 문서이다.

utf_8은 1바이트부터 최대 4바이트까지 가변 길이로 문자를 표현함.


아스키 코드와 utf-8 모두 문자를 숫자로 표현하는 인코딩 방식에 대한 내용임.
아스키 코드는 128개의 문자(0~127)만 표현할 수 있는 제한된 인코딩 방식으로 주로 영어와 기본 구두점을 다룹니다.
UTF-8은 전 세계 모든 유니코드 문자를 표현할 수 있도록 설계된 방식으로, 아스키 코드와 호환되어 아스키 범위의 문자는 같은 방식으로 인코딩됩니다.

문자를 byte로 변경하려면 문자 집합이 필요함. 따라서 어떤 문자 집합을 참고해서 byte로 변경할지 정해야 한다.
String.getByte()의 인자로 Charset 객체를 전달하면 된다.

모든 문자를 byte로 바꿀 때는 항상 인코딩표가 있어야한다.


한글이 깨지는 가장 큰 2가지 이유.
- euc-kr, utf-8이 서로 호환되지 않음.
한글이 깨지는 대부분의 문제는 utf-8로 인코딩한 한글을 euc-kr(ms949)로 디코딩하거나 또는 euc-kr로 인코딩한 한글을 utf-8로 디코딩할 때 발생한다.
- euc-kr(ms949)또는 utf-8로 인코딩한 한글을 iso-8859-1로 디코딩할 때 euc-kr 또는 utf-8로 인코딩한 한글을 지원하지 않는 iso-8859-1로 디코딩 할 때 발생함.
